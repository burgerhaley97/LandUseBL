# Plot the first simulation result
plot(simulation_results)
simulation_results <- simulate_raster_changes(county_crop, target_values, prob_transitions, prob_0s, prob_1s, n_simulations = 100)
simulation_results
gc()
simulation_results_bl <- simulate_raster_changes(ag_raster_all[["2008"]], target_values, prob_transitions, prob_0s, prob_1s, n_simulations = 10)
# Plot the first simulation result
plot(simulation_results_bl)
simulation_results_bl <- simulate_raster_changes(ag_raster_all[["2008"]], target_values, prob_transitions, prob_0s, prob_1s, n_simulations = 100)
# Plot the first simulation result
plot(simulation_results_bl[[1]])
# Plot the first simulation result
plot(simulation_results_bl[[100]])
# Define the path where you want to save the file
file_path <- "Intermediate_rasters/simulation_results_bl.tif"
# Write the SpatRaster to a file
terra::writeRaster(simulation_results_bl, filename = file_path)
# try getting mean patch area distribution on sim data
# mean area of patches in each class
# Initialize a list to store landscape metrics for each year
landscape_metrics_list <- list()
reclassified_raster <- simulation_results_bl
# Calculate landscape metrics for each layer (year)
for (i in 1:nlyr(reclassified_raster)) {
raster_layer <- reclassified_raster[[i]]
year <- names(cdl_all_years)[i]
# Calculate landscape metrics
landscape_metrics <- lsm_c_area_mn(raster_layer)
landscape_metrics$year <- year
landscape_metrics_list[[i]] <- landscape_metrics
}
# Combine all metrics into a single data frame
c_area_metrics <- bind_rows(landscape_metrics_list)
c_area_metrics
# Plot changes in mean patch area over time
library(ggplot2)
class_labels <- c("0" = "Non-Ag", "1" = "Ag")
ggplot(c_area_metrics, aes(x = as.numeric(year), y = value, color = as.factor(class))) +
geom_line() +
labs(title = "Mean Patch Area Over Time",
x = "Year",
y = "Mean Patch Area in Hectares",
color = "Class") +
scale_color_manual(values = c("blue", "green"), labels = class_labels) +
theme_minimal()
tail(c_area_metrics)
# Add a new column with repeated numbers
my_tibble$sim_number <- rep(1:100, each = 2)
# Add a new column with repeated numbers
c_area_metrics$sim_number <- rep(1:100, each = 2)
class_labels <- c("0" = "Non-Ag", "1" = "Ag")
ggplot(c_area_metrics, aes(x = as.numeric(sim_number), y = value, color = as.factor(class))) +
geom_line() +
labs(title = "Mean Patch Area Over Time",
x = "sim number",
y = "Mean Patch Area in Hectares",
color = "Class") +
scale_color_manual(values = c("blue", "green"), labels = class_labels) +
theme_minimal()
c_area_metrics_sub <- c_area_metrics %>%
filter(class %in% 1)
c_area_metrics_sub
ggplot(c_area_metrics_sub, aes(x = as.numeric(sim_number), y = value, color = as.factor(class))) +
geom_line() +
labs(title = "Mean Patch Area Over Time",
x = "sim number",
y = "Mean Patch Area in Hectares",
color = "Class") +
scale_color_manual(values = "green", labels = class_labels) +
theme_minimal()
# Display the results
hist(c_area_metrics, breaks = 20,
main = "Distribution of Pixels from Class 0 \n After 100 Simulations",
xlab = "(simulation cell number/actual cell number) * 100", ylab = "Prob", freq = FALSE)
# Display the results
hist(c_area_metrics, breaks = 20,
main = "Distribution of Pixels from Class 0 \n After 100 Simulations",
xlab = "(simulation cell number/actual cell number) * 100", ylab = "Prob", freq = FALSE)
# Display the results
hist(c_area_metrics$value, breaks = 20,
main = "Distribution of Pixels from Class 0 \n After 100 Simulations",
xlab = "(simulation cell number/actual cell number) * 100", ylab = "Prob", freq = FALSE)
# Display the results
hist(c_area_metrics_sub$value, breaks = 20,
main = "Distribution of Pixels from Class 0 \n After 100 Simulations",
xlab = "(simulation cell number/actual cell number) * 100", ylab = "Prob", freq = FALSE)
# Display the results
hist(c_area_metrics_sub$value, breaks = 20,
main = "Distribution of Pixels from Class 0 \n After 100 Simulations",
xlab = "(simulation cell number/actual cell number) * 100", ylab = "Prob", freq = FALSE, probability = TRUE)
# Display the results
hist(c_area_metrics_sub$value, breaks = 20,
main = "Distribution of Pixels from Class 1 \n After 100 Simulations",
xlab = "(simulation cell number/actual cell number) * 100", ylab = "Prob", freq = FALSE, probability = TRUE)
# Display the results
hist(c_area_metrics_sub$value, breaks = 20,
main = "Distribution of Mn Patch Size from Class 1 \n After 100 Simulations",
xlab = "(simulation cell number/actual cell number) * 100", ylab = "Prob", freq = FALSE, probability = TRUE)
c_area_metrics_sub <- c_area_metrics %>%
filter(class %in% 0)
c_area_metrics_sub
hist(c_area_metrics_sub$value, breaks = 20,
main = "Distribution of Mn Patch Size from Class 0 \n After 100 Simulations",
xlab = "number of cells", ylab = "Prob", freq = FALSE, probability = TRUE)
# Display the results
hist(c_area_metrics_sub$value, breaks = 20,
main = "Distribution of Mn Patch Size from Class 1 \n After 100 Simulations",
xlab = "(simulation cell number/actual cell number) * 100", ylab = "Prob", probability = TRUE)
c_area_metrics_sub <- c_area_metrics %>%
filter(class %in% 1)
c_area_metrics_sub
# Display the results
hist(c_area_metrics_sub$value, breaks = 20,
main = "Distribution of Mn Patch Size from Class 1 \n After 100 Simulations",
xlab = "(simulation cell number/actual cell number) * 100", ylab = "Prob", probability = TRUE)
# Display the results
hist(c_area_metrics_sub$value, breaks = 25,
main = "Distribution of Mn Patch Size from Class 1 \n After 100 Simulations",
xlab = "(simulation cell number/actual cell number) * 100", ylab = "Prob", probability = TRUE)
# Display the results
hist(c_area_metrics_sub$value, breaks = 100,
main = "Distribution of Mn Patch Size from Class 1 \n After 100 Simulations",
xlab = "(simulation cell number/actual cell number) * 100", ylab = "Prob", probability = TRUE)
# Display the results
hist(c_area_metrics_sub$value, breaks = 50,
main = "Distribution of Mn Patch Size from Class 1 \n After 100 Simulations",
xlab = "(simulation cell number/actual cell number) * 100", ylab = "Prob", probability = TRUE)
hist(simulation_results, breaks = 20,
main = "Distribution of Pixels from Class 0 \n After 100 Simulations",
xlab = "number of cells", ylab = "Prob", freq = FALSE, probability = TRUE)
# Display the results
hist(c_area_metrics_sub$value, breaks = 20,
main = "Distribution of Mn Patch Size from Class 1 \n After 100 Simulations",
xlab = "(simulation cell number/actual cell number) * 100", ylab = "Prob", probability = TRUE)
c_area_metrics_sub <- c_area_metrics %>%
filter(class %in% 0)
c_area_metrics_sub
hist(c_area_metrics_sub$value, breaks = 20,
main = "Distribution of Mn Patch Size from Class 0 \n After 100 Simulations",
xlab = "number of cells", ylab = "Prob", freq = FALSE, probability = TRUE)
show_cores(county_crop, class = 1)
cores <- show_cores(county_crop, class = 1)
cores$layer_1
values(cores$layer_1)
cores
class(cores
class(cores)
class(cores)
cores$values
cores$layer_1$data$values
sum(cores$layer_1$data$values == 1)
sum(cores$layer_1$data$values == 0)
cores$layer_1$data$core_label
sum(cores$layer_1$data$core_label)
unique(cores$layer_1$data$values)
cores <- show_cores(county_crop, class = 1, directions = 4)
cores$layer_1
sum(cores$layer_1$data$values == 1)
sum(cores$layer_1$data$values == 0)
cores <- show_cores(ag_raster_all[["2008"]], class = 1, directions = 4)
cores <- show_cores(ag_raster_all[["2008"]], class = 1)
cores
plot(cores$layer_1$value == 1)
color_map <- c("red", "blue")
plot(cores$layer_1, col = color_map)
names(color_map) <- 0:1
plot(cores$layer_1, col = color_map)
cores$layer_1$layers
cores$layer_1$mapping
cores$layer_1$theme
cores$layer_1$labels
cores$layer_1$labels$label
cores$layer_1$data
cores$layer_1$layers
c_area_metrics_sub <- c_area_metrics %>%
filter(class %in% 0)
core_area <- lsm_p_core(county_crop)
source("C:/Users/A02425259/Git/LandUseBL/R/resample_rasters.R", echo=TRUE)
core_area
# Simulation function
simulate_raster_changes <- function(input_raster, target_value,
prob_transition = 0.1, prob_0 = 0.7, prob_1 = 0.3,
n_simulations = 100) {
result_counts <- numeric(n_simulations)
raster_values <- values(input_raster)
# Identify the cells that match the target value
target_cells <- which(raster_values == target_value)
# Calculate the number of pixels to select (percentage of the target cells)
total_target <- length(target_cells)
for (i in 1:n_simulations) {
# Apply the function to get the modified raster
modified_raster <- randomly_select_pixels(input_raster,
target_value, prob_transition,
prob_0, prob_1)
# Count the number of cells with the target value after modification
modified_values <- values(modified_raster)
result_counts[i] <- sum(modified_values == target_value)
}
return((result_counts/total_target) * 100 )
}
# Function to count pixels and plot distribution
count_pixels_and_plot_distribution <- function(spatraster) {
# Check if input is a SpatRaster object
if (!inherits(spatraster, "SpatRaster")) {
stop("The input must be a SpatRaster object.")
}
# Get unique classes and their counts for each layer
class_counts <- lapply(1:nlyr(spatraster), function(i) {
layer <- spatraster[[i]]
freq(layer)
})
# Combine counts from all layers
combined_counts <- do.call(rbind, class_counts)
# Sum counts for each unique class across all layers
total_counts <- aggregate(combined_counts$count, by=list(combined_counts$value), FUN=sum)
colnames(total_counts) <- c("Class", "Count")
# Plot distribution of the number of cells of each type
ggplot(total_counts, aes(x=factor(Class), y=Count)) +
geom_bar(stat="identity", fill="steelblue") +
theme_minimal() +
labs(title="Distribution of Cell Counts by Class",
x="Class",
y="Number of Cells")
}
# Call the function with the example SpatRaster object
count_pixels_and_plot_distribution(simulation_results_bl)
# Function to count pixels and plot distribution by layer and class
count_pixels_and_plot_histogram <- function(spatraster) {
# Check if input is a SpatRaster object
if (!inherits(spatraster, "SpatRaster")) {
stop("The input must be a SpatRaster object.")
}
# Get unique classes and their counts for each layer
class_counts <- lapply(1:nlyr(spatraster), function(i) {
layer <- spatraster[[i]]
freq(layer)
})
# Combine counts from all layers and add layer information
combined_counts <- do.call(rbind, lapply(seq_along(class_counts), function(i) {
cbind(Layer = i, class_counts[[i]])
}))
# Convert to a data frame
combined_counts <- as.data.frame(combined_counts)
colnames(combined_counts) <- c("Layer", "Class", "Count")
# Plot the histogram with facets for each class
ggplot(combined_counts, aes(x = factor(Layer), y = Count, fill = factor(Class))) +
geom_bar(stat = "identity", position = "dodge") +
theme_minimal() +
facet_wrap(~ Class, scales = "free_y") +
labs(title = "Cell Count per Layer for Each Class",
x = "Layer",
y = "Cell Count",
fill = "Class") +
theme(legend.position = "none")
}
# Call the function with the example SpatRaster object
count_pixels_and_plot_histogram(simulation_results_bl)
# Function to count pixels and plot distribution by layer and class
count_pixels_and_plot_histogram <- function(spatraster) {
# Check if input is a SpatRaster object
if (!inherits(spatraster, "SpatRaster")) {
stop("The input must be a SpatRaster object.")
}
# Get unique classes and their counts for each layer
class_counts <- lapply(1:nlyr(spatraster), function(i) {
layer <- spatraster[[i]]
freq(layer)
})
# Combine counts from all layers and add layer information
combined_counts <- do.call(rbind, lapply(seq_along(class_counts), function(i) {
cbind(Layer = i, class_counts[[i]])
}))
# Convert to a data frame
combined_counts <- as.data.frame(combined_counts)
colnames(combined_counts) <- c("Layer", "Class", "Count")
return(combined_counts)
}
# Call the function with the example SpatRaster object
count_pixels_and_plot_histogram(simulation_results_bl)
# Call the function with the example SpatRaster object
counts <- count_pixels_and_plot_histogram(simulation_results_bl)
counts
counts_sub <- counts %>%
filter(Count %in% 1)
class(counts)
colnames(counts) <- c("Layer", "Sub_layer", "Class", "Count")
counts_sub <- counts %>%
filter(Class %in% 1)
counts_sub
hist(counts_sub$Count, probability = TRUE)
hist(counts_sub$Count, probability = TRUE, main = Class 1 pixel counts per layer)
hist(counts_sub$Count, probability = TRUE, main = "Class 1 pixel counts per layer")
counts_sub <- counts %>%
filter(Class %in% 0)
hist(counts_sub$Count, probability = TRUE, main = "Class 0 pixel counts per layer")
# Function to randomly select a percentage of pixels with specific values and
# change their values based on specified probabilities
randomly_select_pixels <- function(input_raster, target_values, prob_transitions, prob_0s, prob_1s) {
# Define the function to apply to each pixel
apply_function <- function(pixel_value) {
# Iterate over the target values
for (i in seq_along(target_values)) {
target_value <- target_values[i]
prob_transition <- prob_transitions[i]
prob_0 <- prob_0s[i]
prob_1 <- prob_1s[i]
# Check if the pixel value matches the target value
if (pixel_value == target_value) {
# Determine if the pixel should be changed based on the transition probability
if (runif(1) < prob_transition) {
# Randomly change the pixel value based on the specified probabilities
pixel_value <- sample(c(0, 1), size = 1, replace = TRUE, prob = c(prob_0, prob_1))
}
}
}
return(pixel_value)
}
# Apply the function to each pixel of the raster
output_raster <- app(input_raster, apply_function)
return(output_raster)
}
test_mod <- randomly_select_pixels(ag_raster_all[["2008"]], target_values, prob_transitions, prob_0s, prob_1s)
# Define the target values and their respective probabilities
target_values <- c(0, 1)  # Target values to reassign
prob_transitions <- c(0.1, 0.3)  # Probabilities of transition for each target value
prob_0s <- c(0.9, 0.3)  # Probabilities of transitioning to 0 for each target value
prob_1s <- c(0.1, 0.7)
test_mod <- randomly_select_pixels(ag_raster_all[["2008"]], target_values, prob_transitions, prob_0s, prob_1s)
randomly_select_pixels <- function(input_raster, target_values, prob_transitions, prob_0s, prob_1s) {
# Define the function to apply to each pixel
apply_function <- function(pixel_value) {
# Initialize new pixel value as the current value
new_pixel_value <- pixel_value
# Iterate over the target values
for (i in seq_along(target_values)) {
target_value <- target_values[i]
prob_transition <- prob_transitions[i]
prob_0 <- prob_0s[i]
prob_1 <- prob_1s[i]
# Check if the pixel value matches the target value
if (pixel_value == target_value) {
# Determine if the pixel should be changed based on the transition probability
if (runif(1) < prob_transition) {
# Randomly change the pixel value based on the specified probabilities
new_pixel_value <- sample(c(0, 1), size = 1, replace = TRUE, prob = c(prob_0, prob_1))
}
}
}
return(new_pixel_value)
}
# Apply the function to each pixel of the raster
output_raster <- app(input_raster, apply_function)
return(output_raster)
}
test_mod <- randomly_select_pixels(ag_raster_all[["2008"]], target_values, prob_transitions, prob_0s, prob_1s)
randomly_select_pixels <- function(input_raster, target_values, prob_transitions, prob_0s, prob_1s) {
# Define the function to apply to each pixel
apply_function <- function(pixel_value) {
# Initialize new pixel value as the current value
new_pixel_value <- pixel_value
# Iterate over the target values
for (i in seq_along(target_values)) {
target_value <- target_values[i]
prob_transition <- prob_transitions[i]
prob_0 <- prob_0s[i]
prob_1 <- prob_1s[i]
# Check if the pixel value matches the target value
if (pixel_value == target_value) {
# Determine if the pixel should be changed based on the transition probability
if (runif(1) < prob_transition) {
# Randomly change the pixel value based on the specified probabilities
new_pixel_value <- sample(c(0, 1), size = 1, replace = TRUE, prob = c(prob_0, prob_1))
}
}
}
return(new_pixel_value)
}
# Apply the function to each pixel of the raster
output_raster <- app(input_raster, apply_function)
return(output_raster)
}
# Function to randomly select a percentage of pixels with specific values and
# change their values based on specified probabilities
randomly_select_pixels <- function(input_raster, target_values, prob_transitions, prob_0s, prob_1s) {
# Define the function to apply to each pixel
apply_function <- function(pixel_values) {
# Initialize new pixel values as the current values
new_pixel_values <- pixel_values
# Iterate over each pixel value
for (j in seq_along(pixel_values)) {
pixel_value <- pixel_values[j]
# Iterate over the target values
for (i in seq_along(target_values)) {
target_value <- target_values[i]
prob_transition <- prob_transitions[i]
prob_0 <- prob_0s[i]
prob_1 <- prob_1s[i]
# Check if the pixel value matches the target value
if (pixel_value == target_value) {
# Determine if the pixel should be changed based on the transition probability
if (runif(1) < prob_transition) {
# Randomly change the pixel value based on the specified probabilities
new_pixel_values[j] <- sample(c(0, 1), size = 1, replace = TRUE, prob = c(prob_0, prob_1))
}
}
}
}
return(new_pixel_values)
}
# Apply the function to each pixel of the raster
output_raster <- app(input_raster, apply_function)
return(output_raster)
}
test_mod <- randomly_select_pixels(ag_raster_all[["2008"]], target_values, prob_transitions, prob_0s, prob_1s)
# Function to randomly select a percentage of pixels with specific values and
# change their values based on specified probabilities
randomly_select_pixels <- function(input_raster, target_values, prob_transitions, prob_0s, prob_1s) {
# Define the function to apply to each pixel
apply_function <- function(pixel_values) {
# Initialize new pixel values as the current values
new_pixel_values <- pixel_values
# Iterate over each pixel value
for (j in seq_along(pixel_values)) {
pixel_value <- pixel_values[j]
# Skip if the pixel value is NA
if (is.na(pixel_value)) next
# Iterate over the target values
for (i in seq_along(target_values)) {
target_value <- target_values[i]
prob_transition <- prob_transitions[i]
prob_0 <- prob_0s[i]
prob_1 <- prob_1s[i]
# Check if the pixel value matches the target value
if (pixel_value == target_value) {
# Determine if the pixel should be changed based on the transition probability
if (runif(1) < prob_transition) {
# Randomly change the pixel value based on the specified probabilities
new_pixel_values[j] <- sample(c(0, 1), size = 1, replace = TRUE, prob = c(prob_0, prob_1))
}
}
}
}
return(new_pixel_values)
}
# Apply the function to each pixel of the raster
output_raster <- app(input_raster, apply_function)
return(output_raster)
}
test_mod <- randomly_select_pixels(ag_raster_all[["2008"]], target_values, prob_transitions, prob_0s, prob_1s)
# try things with terra::app
rast_test <- ag_raster_all[["2008"]]
test_mod
plot(test_mod)
test_which <- terra::app(rast_test, fun = which(values(rast_test)) == 1)
values(rast_test)) == 1
test_which <- terra::app(rast_test, fun = which(values(rast_test) == 1))
which(values(rast_test) == 1)
test_which <- terra::app(rast_test, which(values(rast_test) == 1))
test_which <- terra::app(rast_test, which(1))
test_which <- terra::app(rast_test, min)
test_which
plot(test_which)
test_which <- terra::app(rast_test, which)
plot(test_which)
test_which <- terra::app(rast_test, which == 0)
test_which <- terra::app(rast_test, which(FALSE))
test_which <- terra::app(rast_test, which(0))
test_which <- terra::app(rast_test,  which(values(rast_test)) == 0)
test_which <- terra::app(rast_test,  which(values(rast_test) == 0))
test_which <- terra::app(rast_test,  which)
plot(test_which)
test_which <- terra::app(rast_test,  which(values == 1))
test_which <- terra::app(rast_test,  which, 0)
plot(test_which)
test_which <- terra::app(rast_test,  which, values = 0)
plot(test_which)
test_which <- terra::app(rast_test,  which(values = 0))
test_which <- terra::app(rast_test,  which(0))
test_which <- terra::app(rast_test,  which(FALSE))
test_which <- terra::app(rast_test,  which(c(FALSE, FALSE))
)
test_which <- terra::app(rast_test,  which.min)
plot(test_which)
# try things with terra::app function
rast_test <- ag_raster_all[["2008"]]
plot(rast_test)
test_which <- terra::app(rast_test,  which.max)
plot(test_which)
test_which <- terra::app(rast_test,  all(values() < 1))
test_which <- terra::app(rast_test,  all(x < 1))
test_which <- terra::app(rast_test,  all)
plot(test_which)
test_which <- terra::app(rast_test,  all(logical(0)))
test_which <- terra::app(rast_test,  which(rast_test == 1))
test_which <- terra::app(rast_test,  which(i == 1))
test_which <- terra::app(rast_test,  which)
test_which <- terra::app(rast_test,  which = FALSE)
test_which <- terra::app(rast_test,  fun = (which = FALSE))
test_which <- terra::app(rast_test,  fun = which(FALSE))
test_which <- terra::app(rast_test,  fun = "which", 0)
plot(test_which)
test_which <- terra::app(rast_test,  fun = "which.min")
plot(test_which)
test_which <- terra::app(rast_test,  fun = which(values() == 0))
test_which <- terra::app(rast_test,  fun = which(values(x) == 0))
test_which <- terra::app(rast_test,  fun = which(0))
test_which <- terra::app(rast_test,  fun = which(FALSE))
runif(1)
runif(1)\
runif(1)
test_which <- terra::app(rast_test,  fun = median)
plot(test_which)
